// Generated by Dagger (https://dagger.dev).
package org.asghari.guardiannews.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import org.asghari.guardiannews.data.local.LocalDataSource;
import org.asghari.guardiannews.domain.repositories.SettingsRepository;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideSettingsRepositoryFactory implements Factory<SettingsRepository> {
  private final DataModule module;

  private final Provider<LocalDataSource> localDataSourceProvider;

  public DataModule_ProvideSettingsRepositoryFactory(DataModule module,
      Provider<LocalDataSource> localDataSourceProvider) {
    this.module = module;
    this.localDataSourceProvider = localDataSourceProvider;
  }

  @Override
  public SettingsRepository get() {
    return provideSettingsRepository(module, localDataSourceProvider.get());
  }

  public static DataModule_ProvideSettingsRepositoryFactory create(DataModule module,
      Provider<LocalDataSource> localDataSourceProvider) {
    return new DataModule_ProvideSettingsRepositoryFactory(module, localDataSourceProvider);
  }

  public static SettingsRepository provideSettingsRepository(DataModule instance,
      LocalDataSource localDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideSettingsRepository(localDataSource));
  }
}
