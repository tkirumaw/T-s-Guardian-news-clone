// Generated by Dagger (https://dagger.dev).
package org.asghari.guardiannews.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import org.asghari.guardiannews.data.remote.RemoteDataSource;
import org.asghari.guardiannews.domain.repositories.GuardianNewsRepository;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideNewsRepositoryFactory implements Factory<GuardianNewsRepository> {
  private final DataModule module;

  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  public DataModule_ProvideNewsRepositoryFactory(DataModule module,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    this.module = module;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public GuardianNewsRepository get() {
    return provideNewsRepository(module, remoteDataSourceProvider.get());
  }

  public static DataModule_ProvideNewsRepositoryFactory create(DataModule module,
      Provider<RemoteDataSource> remoteDataSourceProvider) {
    return new DataModule_ProvideNewsRepositoryFactory(module, remoteDataSourceProvider);
  }

  public static GuardianNewsRepository provideNewsRepository(DataModule instance,
      RemoteDataSource remoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsRepository(remoteDataSource));
  }
}
